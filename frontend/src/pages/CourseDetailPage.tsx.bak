import { useState, useEffect } from 'react'
import { useParams, Link, useNavigate } from 'react-router-dom'
import { useTheme } from '../contexts/ThemeContext'
import { 
  ArrowLeft, Star, Clock, Users, BookOpen, Play, 
  CheckCircle, Lock, FileText, Globe, Award
} from 'lucide-react'
import { courseAPI, APIError } from '../utils/api'
import type { Course, Video, Enrollment } from '../utils/api'
import { useAuth } from '../contexts/AuthContext'

const CourseDetailPage = () => {
  const { courseId } = useParams<{ courseId: string }>()
  const navigate = useNavigate()
  const { isAuthenticated } = useAuth()
  const { theme, toggleTheme } = useTheme()
  
  const [course, setCourse] = useState<Course | null>(null)
  const [videos, setVideos] = useState<Video[]>([])
  const [enrollment, setEnrollment] = useState<Enrollment | null>(null)
  const [isEnrolled, setIsEnrolled] = useState(false)
  const [loading, setLoading] = useState(true)
  const [enrolling, setEnrolling] = useState(false)
  const [error, setError] = useState<string | null>(null)
                            <div className="p-2 rounded-xl bg-pink-100 dark:bg-pink-900/40">
                              <Award className="w-5 h-5 text-pink-600 dark:text-pink-400" />
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Certificate of completion</p>
                              <p className="text-xs text-gray-600 dark:text-gray-400">Verify your achievement</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Course Includes */}t CourseDetailPage = () => {
  const { courseId } = useParams<{ courseId: string }>()
  const navigate = useNavigate()
  const { isAuthenticated } = useAuth()
  const { theme, toggleTheme } = useTheme()
  
  const [course, setCourse] = useState<Course | null>(null)
  const [videos, setVideos] = useState<Video[]>([])
  const [enrollment, setEnrollment] = useState<Enrollment | null>(null)
  const [isEnrolled, setIsEnrolled] = useState(false)
  const [loading, setLoading] = useState(true)
  const [enrolling, setEnrolling] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (courseId) {
      loadCourseDetails()
    }
  }, [courseId, isAuthenticated])

  const loadCourseDetails = async () => {
    if (!courseId) return

    try {
      setLoading(true)
      setError(null)

      const response = await courseAPI.getCourse(courseId)
      
      if (response.success) {
        setCourse(response.data.course)
        setVideos(response.data.videos)
        setIsEnrolled(response.data.isEnrolled)
        setEnrollment(response.data.enrollment)
      }
    } catch (error) {
      console.error('Failed to load course:', error)
      setError(error instanceof APIError ? error.message : 'Failed to load course')
    } finally {
      setLoading(false)
    }
  }

  const handleEnroll = async () => {
    if (!courseId || !isAuthenticated) {
      navigate('/login')
      return
    }

    try {
      setEnrolling(true)
      setError(null)

      const response = await courseAPI.enrollCourse(courseId)
      
      if (response.success) {
        setIsEnrolled(true)
        setEnrollment(response.data.enrollment)
        // Reload course to get updated videos
        loadCourseDetails()
      }
    } catch (error) {
      console.error('Enrollment failed:', error)
      setError(error instanceof APIError ? error.message : 'Enrollment failed')
    } finally {
      setEnrolling(false)
    }
  }

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60)
    const mins = minutes % 60
    if (hours > 0) {
      return `${hours}h ${mins}m`
    }
    return `${mins}m`
  }

  const formatVideoDuration = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${minutes}:${secs.toString().padStart(2, '0')}`
  }

  const formatPrice = (price: number) => {
    if (price === 0) return 'Free'
    return `$${price}`
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 flex items-center justify-center">
        <div className="relative p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-xl dark:shadow-gray-900">
          <div className="absolute -inset-1 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-500 dark:to-purple-500 rounded-2xl blur opacity-20"></div>
          <div className="relative text-center">
            <div className="flex flex-col items-center space-y-4">
              <div className="animate-spin rounded-full h-12 w-12 border-2 border-blue-600 dark:border-blue-400 border-t-transparent"></div>
              <p className="text-gray-600 dark:text-gray-300 font-light animate-pulse">Loading your course...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error || !course) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 flex items-center justify-center p-6">
        <div className="relative w-full max-w-md">
          <div className="absolute -inset-1 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-500 dark:to-purple-500 rounded-2xl blur opacity-20"></div>
          <div className="relative bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-xl dark:shadow-gray-900 text-center">
            <div className="mb-6">
              <div className="w-16 h-16 mx-auto bg-red-50 dark:bg-red-900/30 rounded-full flex items-center justify-center mb-4">
                <svg className="w-8 h-8 text-red-400 dark:text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <p className="text-gray-600 dark:text-gray-300 font-light mb-6">{error || 'Course not found'}</p>
              <Link
                to="/courses"
                className="inline-flex items-center px-6 py-3 text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-500 dark:to-purple-500 rounded-lg hover:from-blue-700 hover:to-purple-700 dark:hover:from-blue-600 dark:hover:to-purple-600 transition-all duration-300 transform hover:-translate-y-0.5 hover:shadow-lg"
              >
                Browse Courses
                <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </Link>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      {/* Header */}
      <header className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-100 dark:border-gray-800 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Link
                to="/courses"
                className="p-2 rounded-lg hover:bg-gray-100 transition-all duration-200 group"
              >
                <ArrowLeft size={20} className="text-gray-600 group-hover:text-gray-900" />
              </Link>
              <Link to="/dashboard" className="flex-shrink-0 group">
                <h1 className="text-xl font-serif font-normal group-hover:from-blue-700 group-hover:to-purple-700 transition-all duration-300">
                  <span className="text-black">Level</span><span className="text-orange-500">Up</span>
                </h1>
              </Link>
            </div>
            <nav className="flex items-center space-x-4">
              <Link
                to="/dashboard"
                className="px-4 py-2 text-sm font-medium text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200"
              >
                Dashboard
              </Link>
              
              {/* Theme Toggle Button */}
              <button
                onClick={toggleTheme}
                className="p-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200"
                aria-label="Toggle theme"
              >
                {theme === 'dark' ? (
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
                  </svg>
                )}
              </button>
            </nav>
          </div>
        </div>
      </header>

      {/* Course Header */}
      <section className="pt-16 pb-24 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900"></div>
        <div className="absolute inset-0 bg-grid-pattern opacity-[0.03]"></div>
        <div className="absolute top-0 right-0 w-96 h-96 bg-gradient-to-br from-indigo-400/10 to-purple-400/10 rounded-full blur-3xl transform translate-x-32 -translate-y-16"></div>
        <div className="absolute bottom-0 left-0 w-96 h-96 bg-gradient-to-br from-blue-400/10 to-pink-400/10 rounded-full blur-3xl transform -translate-x-32 translate-y-16"></div>
        
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            <div className="lg:col-span-2">
              <div className="flex flex-wrap items-center gap-3 mb-8 animate-fade-in">
                <span className="px-4 py-1.5 text-sm font-medium text-indigo-600 dark:text-indigo-400 bg-indigo-50 dark:bg-indigo-900/30 rounded-full ring-1 ring-indigo-600/10 dark:ring-indigo-400/20">
                  {course.category}
                </span>
                <span className="px-4 py-1.5 text-sm font-medium text-purple-600 dark:text-purple-400 bg-purple-50 dark:bg-purple-900/30 rounded-full ring-1 ring-purple-600/10 dark:ring-purple-400/20">
                  {course.level}
                </span>
              </div>

              <h1 className="text-4xl lg:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 mb-8 leading-tight animate-gradient">
                {course.title}
              </h1>

              <p className="text-xl text-gray-600 dark:text-gray-300 mb-10 leading-relaxed max-w-3xl">
                {course.description}
              </p>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
                <div className="group relative transform hover:-translate-y-1 transition-all duration-300">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 to-indigo-400 rounded-2xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative p-6 bg-white dark:bg-gray-800 rounded-2xl">
                    <div className="flex items-center mb-3">
                      <div className="relative">
                        <div className="absolute -inset-2 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg transform rotate-6 group-hover:rotate-12 transition-transform duration-300"></div>
                        <div className="relative p-3 bg-gradient-to-r from-indigo-600 to-indigo-400 rounded-lg">
                          <Clock size={20} className="text-white" />
                        </div>
                      </div>
                    </div>
                    <p className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-indigo-400">{formatDuration(course.duration)}</p>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Duration</p>
                  </div>
                </div>

                <div className="group relative transform hover:-translate-y-1 transition-all duration-300">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-purple-600 to-purple-400 rounded-2xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative p-6 bg-white dark:bg-gray-800 rounded-2xl">
                    <div className="flex items-center mb-3">
                      <div className="relative">
                        <div className="absolute -inset-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg transform rotate-6 group-hover:rotate-12 transition-transform duration-300"></div>
                        <div className="relative p-3 bg-gradient-to-r from-purple-600 to-purple-400 rounded-lg">
                          <Users size={20} className="text-white" />
                        </div>
                      </div>
                    </div>
                    <p className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-purple-400">{course.enrollmentCount}</p>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Students</p>
                  </div>
                </div>

                <div className="group relative transform hover:-translate-y-1 transition-all duration-300">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-amber-500 to-amber-300 rounded-2xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative p-6 bg-white dark:bg-gray-800 rounded-2xl">
                    <div className="flex items-center mb-3">
                      <div className="relative">
                        <div className="absolute -inset-2 bg-amber-100 dark:bg-amber-900/30 rounded-lg transform rotate-6 group-hover:rotate-12 transition-transform duration-300"></div>
                        <div className="relative p-3 bg-gradient-to-r from-amber-500 to-amber-300 rounded-lg">
                          <Star size={20} className="text-white" />
                        </div>
                      </div>
                    </div>
                    <p className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-500 to-amber-300">
                      {course.rating.average.toFixed(1)}
                    </p>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">{course.rating.count} Reviews</p>
                  </div>
                </div>

                <div className="group relative transform hover:-translate-y-1 transition-all duration-300">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-green-600 to-green-400 rounded-2xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative p-6 bg-white dark:bg-gray-800 rounded-2xl">
                    <div className="flex items-center mb-3">
                      <div className="relative">
                        <div className="absolute -inset-2 bg-green-100 dark:bg-green-900/30 rounded-lg transform rotate-6 group-hover:rotate-12 transition-transform duration-300"></div>
                        <div className="relative p-3 bg-gradient-to-r from-green-600 to-green-400 rounded-lg">
                          <BookOpen size={20} className="text-white" />
                        </div>
                      </div>
                    </div>
                    <p className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-green-400">{videos.length}</p>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Lessons</p>
                  </div>
                </div>
              </div>

              <div className="mt-12">
                <p className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-6">Course Instructor</p>
                <div className="group relative">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative flex items-center p-6 bg-white dark:bg-gray-800 rounded-2xl border border-gray-100 dark:border-gray-700 hover:shadow-xl transition-all duration-300">
                    <div className="relative mr-6">
                      <div className="absolute -inset-2 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-full blur opacity-25 animate-pulse"></div>
                      <div className="relative w-16 h-16 bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xl font-bold">
                          {course.instructor.name.charAt(0).toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <div>
                      <p className="text-lg font-semibold text-gray-900 dark:text-white mb-1">{course.instructor.name}</p>
                      <p className="text-gray-600 dark:text-gray-400">{course.instructor.email}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Enrollment Card */}
            <div className="lg:col-span-1">
              <div className="sticky top-24 z-40">
                <div className="group relative">
                  <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-3xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                  <div className="relative bg-white dark:bg-gray-800 p-8 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-1">
                    {/* Course Image */}
                    <div className="rounded-2xl overflow-hidden mb-8 relative group">
                      <div className="absolute inset-0 bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-600 opacity-75"></div>
                      <div className="absolute inset-0 bg-grid-pattern opacity-25"></div>
                      <div className="relative h-56 flex items-center justify-center">
                        <div className="transform group-hover:scale-110 group-hover:rotate-6 transition-transform duration-500">
                          <div className="absolute -inset-6 bg-white/20 rounded-full blur-lg"></div>
                          <BookOpen size={64} className="relative z-10 text-white" />
                        </div>
                      </div>
                    </div>

                    <div className="text-center mb-8">
                      <div className="text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 animate-gradient mb-3">
                        {formatPrice(course.price)}
                      </div>
                      {course.price > 0 && (
                        <div className="flex items-center justify-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                          <span className="px-3 py-1 bg-indigo-50 dark:bg-indigo-900/30 rounded-full">One-time payment</span>
                          <span>•</span>
                          <span className="px-3 py-1 bg-purple-50 dark:bg-purple-900/30 rounded-full">Lifetime access</span>
                        </div>
                      )}
                    </div>

                    {error && (
                      <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/30 border border-red-100 dark:border-red-800 rounded-lg">
                        <div className="flex items-center">
                          <svg className="w-5 h-5 text-red-400 dark:text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <p className="text-sm text-red-600 dark:text-red-400 font-medium">{error}</p>
                        </div>
                      </div>
                    )}

                    <div className="space-y-6">
                      {!isAuthenticated ? (
                        <div className="relative group">
                          <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl blur opacity-50 group-hover:opacity-100 transition duration-300"></div>
                          <Link
                            to="/login"
                            className="relative block w-full py-4 px-6 rounded-2xl bg-white dark:bg-gray-800 text-center transform transition duration-300 hover:scale-[1.02]"
                          >
                            <span className="text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 font-bold text-lg">
                              Sign In to Enroll
                            </span>
                          </Link>
                        </div>
                      ) : isEnrolled ? (
                        <div className="space-y-6">
                          <div className="p-4 rounded-2xl bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20">
                            <div className="flex items-center gap-3">
                              <div className="p-2 rounded-xl bg-green-100 dark:bg-green-900/40">
                                <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
                              </div>
                              <div>
                                <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Successfully Enrolled</p>
                                <p className="text-xs text-gray-600 dark:text-gray-400">You have access to all content</p>
                              </div>
                            </div>
                          </div>

                          {enrollment && (
                            <div className="p-4 rounded-2xl bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20">
                              <div className="flex items-center justify-between mb-3">
                                <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Course Progress</p>
                                <p className="text-sm font-medium text-indigo-600 dark:text-indigo-400">{enrollment.progress.overallPercentage}%</p>
                              </div>
                              <div className="relative h-2 bg-blue-100 dark:bg-blue-900/40 rounded-full overflow-hidden">
                                <div 
                                  className="absolute inset-y-0 left-0 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-full transition-all duration-500 ease-in-out"
                                  style={{ width: `${enrollment.progress.overallPercentage}%` }}
                                >
                                  <div className="absolute inset-0 bg-white/20 blur"></div>
                                </div>
                              </div>
                            </div>
                          )}

                          <div className="relative group">
                            <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl blur opacity-50 group-hover:opacity-100 transition duration-300"></div>
                            <Link
                              to={`/courses/${course._id}/learn`}
                              className="relative block w-full py-4 px-6 rounded-2xl bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 text-white font-bold text-lg text-center transform transition duration-300 hover:scale-[1.02]"
                            >
                              Continue Learning
                            </Link>
                          </div>
                        </div>
                      ) : (
                        <div className="relative group">
                          <div className="absolute -inset-0.5 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl blur opacity-50 group-hover:opacity-100 transition duration-300"></div>
                          <button
                            onClick={handleEnroll}
                            disabled={enrolling}
                            className="relative w-full py-4 px-6 rounded-2xl bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 text-white font-bold text-lg transform transition duration-300 hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                          >
                            {enrolling ? (
                              <div className="flex items-center justify-center gap-2">
                                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                <span>Enrolling...</span>
                              </div>
                            ) : (
                              'Enroll Now'
                            )}
                          </button>
                        </div>
                      )}

                      <div className="grid grid-cols-1 gap-4">
                        <div className="p-4 rounded-2xl bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20">
                          <div className="flex items-center gap-3">
                            <div className="p-2 rounded-xl bg-indigo-100 dark:bg-indigo-900/40">
                              <Clock className="w-5 h-5 text-indigo-600 dark:text-indigo-400" />
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200">30-day money-back guarantee</p>
                              <p className="text-xs text-gray-600 dark:text-gray-400">Risk-free enrollment</p>
                            </div>
                          </div>
                        </div>
                        
                        <div className="p-4 rounded-2xl bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20">
                          <div className="flex items-center gap-3">
                            <div className="p-2 rounded-xl bg-purple-100 dark:bg-purple-900/40">
                              <Globe className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Access on all devices</p>
                              <p className="text-xs text-gray-600 dark:text-gray-400">Learn anytime, anywhere</p>
                            </div>
                          </div>
                        </div>
                        
                        <div className="p-4 rounded-2xl bg-gradient-to-r from-pink-50 to-indigo-50 dark:from-pink-900/20 dark:to-indigo-900/20">
                          <div className="flex items-center gap-3">
                            <div className="p-2 rounded-xl bg-pink-100 dark:bg-pink-900/40">
                              <Award className="w-5 h-5 text-pink-600 dark:text-pink-400" />
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200">Certificate of completion</p>
                              <p className="text-xs text-gray-600 dark:text-gray-400">Verify your achievement</p>
                            </div>
                          </div>
                        </div>
                      </div>

                    {/* Course Includes */}
                    <div className="mt-8 pt-8 border-t border-gray-100 dark:border-gray-700">
                      <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4">This course includes:</h4>
                      <ul className="space-y-4">
                        <li className="flex items-center text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 p-3 rounded-lg">
                          <div className="w-8 h-8 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mr-3">
                            <Play size={16} className="text-purple-600 dark:text-purple-400" />
                          </div>
                          <span>{videos.length} video lessons</span>
                        </li>
                        <li className="flex items-center text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 p-3 rounded-lg">
                          <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-3">
                            <Clock size={16} className="text-blue-600 dark:text-blue-400" />
                          </div>
                          <span>{formatDuration(course.duration)} total content</span>
                        </li>
                        <li className="flex items-center text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 p-3 rounded-lg">
                          <div className="w-8 h-8 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mr-3">
                            <FileText size={16} className="text-green-600 dark:text-green-400" />
                          </div>
                          <span>Downloadable resources</span>
                        </li>
                        <li className="flex items-center text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 p-3 rounded-lg">
                          <div className="w-8 h-8 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg flex items-center justify-center mr-3">
                            <CheckCircle size={16} className="text-yellow-600 dark:text-yellow-400" />
                          </div>
                          <span>Certificate of completion</span>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Course Content */}
      <section className="py-12">
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            {/* Left Content */}
            <div className="lg:col-span-2 space-y-12">
              {/* What You'll Learn */}
              {course.learningOutcomes.length > 0 && (
                <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-8 hover:shadow-md transition-all duration-300">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent mb-6">
                    What you'll learn
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {course.learningOutcomes.map((outcome, index) => (
                      <div key={index} className="flex items-start space-x-3 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-700 rounded-lg">
                        <div className="w-6 h-6 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 rounded-full flex items-center justify-center flex-shrink-0">
                          <CheckCircle size={14} className="text-white" />
                        </div>
                        <span className="text-sm text-gray-700 dark:text-gray-300">{outcome}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Requirements */}
              {course.requirements.length > 0 && (
                <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-8 hover:shadow-md transition-all duration-300">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent mb-6">
                    Requirements
                  </h3>
                  <ul className="space-y-4">
                    {course.requirements.map((requirement, index) => (
                      <li key={index} className="flex items-center space-x-3">
                        <div className="w-2 h-2 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 rounded-full"></div>
                        <span className="text-sm text-gray-700 dark:text-gray-300">{requirement}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            {/* Course Curriculum */}
            <div className="lg:col-span-1">
              <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm dark:shadow-gray-900 p-8 hover:shadow-md transition-all duration-300">
                <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent dark:from-blue-400 dark:to-purple-400 mb-6">
                  Course Content
                </h3>
                <div className="space-y-3">
                  {videos.map((video, index) => (
                    <div
                      key={video._id}
                      className="group flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 dark:hover:from-gray-600 dark:hover:to-gray-600 transition-all duration-300"
                    >
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${
                          video.isPreview 
                            ? 'bg-green-100' 
                            : isEnrolled
                              ? video.progress?.isCompleted
                                ? 'bg-green-100'
                                : 'bg-blue-100'
                              : 'bg-gray-100'
                        }`}>
                          {video.isPreview ? (
                            <Play size={16} className="text-green-600" />
                          ) : isEnrolled ? (
                            video.progress?.isCompleted ? (
                              <CheckCircle size={16} className="text-green-600" />
                            ) : (
                              <Play size={16} className="text-blue-600" />
                            )
                          ) : (
                            <Lock size={16} className="text-gray-400" />
                          )}
                        </div>
                        <div>
                          <p className="text-sm font-medium text-gray-700 dark:text-gray-200 group-hover:text-gray-900 dark:group-hover:text-white">
                            {index + 1}. {video.title}
                          </p>
                          {video.isPreview && (
                            <span className="text-xs font-medium text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/30 px-2 py-1 rounded-full">
                              Preview
                            </span>
                          )}
                        </div>
                      </div>
                      <span className="text-xs font-medium text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300">
                        {formatVideoDuration(video.duration)}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default CourseDetailPage